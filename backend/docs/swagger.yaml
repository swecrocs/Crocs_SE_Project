basePath: /
definitions:
  controllers.ErrorResponse:
    properties:
      error:
        example: Invalid request
        type: string
    type: object
  controllers.ProfileEditRequest:
    properties:
      affiliation:
        type: string
      bio:
        type: string
      full_name:
        type: string
    type: object
  controllers.ProfileEditResponse:
    properties:
      message:
        type: string
    type: object
  controllers.ProfileRetrievalResponse:
    properties:
      affiliation:
        type: string
      bio:
        type: string
      email:
        type: string
      full_name:
        type: string
      user_id:
        type: integer
    type: object
  controllers.ProjectCreationRequest:
    properties:
      description:
        type: string
      required_skills:
        items:
          type: string
        type: array
      status:
        enum:
        - open
        - in-progress
        - completed
        type: string
      title:
        type: string
      visibility:
        enum:
        - private
        type: string
    required:
    - title
    type: object
  controllers.ProjectCreationResponse:
    properties:
      message:
        example: Project successfully created
        type: string
    type: object
  controllers.ProjectListResponse:
    properties:
      projects:
        items:
          $ref: '#/definitions/controllers.ProjectRetrievalResponse'
        type: array
    type: object
  controllers.ProjectRetrievalResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      owner_id:
        type: integer
      required_skills:
        items:
          type: string
        type: array
      status:
        type: string
      title:
        type: string
      visibility:
        type: string
    type: object
  controllers.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  controllers.UserLoginResponse:
    properties:
      message:
        type: string
      token:
        type: string
      user_id:
        type: integer
    type: object
  controllers.UserRegistrationRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  controllers.UserRegistrationResponse:
    properties:
      message:
        example: Registration successful
        type: string
      user_id:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  title: The Grid Backend API
  version: "0.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user login with email and password, returns JWT token
        on success.
      parameters:
      - description: User credentials
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/controllers.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UserLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Login user
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account using user credentials. The provided
        password is hashed before storing to database. A blank user profile is created.
      parameters:
      - description: User credentials
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/controllers.UserRegistrationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.UserRegistrationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
  /projects:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all research projects
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.ProjectListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: List all research projects
      tags:
      - Projects
    post:
      consumes:
      - application/json
      description: Creates a new research project and assigns the creator as an owner
      parameters:
      - description: Project attributes
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.ProjectCreationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.ProjectCreationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Create research project
      tags:
      - Projects
  /projects/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves details of a specific research project by ID
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.ProjectRetrievalResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Get research project details
      tags:
      - Projects
  /users/{id}/profile:
    get:
      consumes:
      - application/json
      description: Retrieve user profile information by user ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.ProfileRetrievalResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Get user profile
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update an existing user profile with new information.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Profile information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.ProfileEditRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.ProfileEditResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized - Missing or invalid JWT token
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "403":
          description: Forbidden - Cannot modify another user's profile
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Edit user profile
      tags:
      - Users
swagger: "2.0"
